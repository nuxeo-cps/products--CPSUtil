<dtml-let last_modified="_.DateTime()-14" expires="_.DateTime()+1" >
<dtml-call "REQUEST.RESPONSE.setHeader( 'Content-Type', 'text/javascript' )">
<dtml-call "REQUEST.RESPONSE.setHeader( 'Last-Modified', last_modified.toZone('GMT').rfc822() )">
<dtml-call "REQUEST.RESPONSE.setHeader( 'Cache-Control', 'max-age=36000, must-revalidate' )">
<dtml-call "REQUEST.RESPONSE.setHeader( 'Expires', expires.toZone('GMT').rfc822() )" >
</dtml-let>

/*  JavaScript Context Menu 0.2
 *
 * Copyright (c) 2005 Nicolas Schmitt
 * 
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *
 */

 var ContextMenu = Class.create();

ContextMenu.prototype = {
    _currentMenu : null,
	initialize: function(elt, mnu) {
        this.options = Object.extend({
            allowed: null,
            duration: 0.3
        }, arguments[2] || {});
        if (this.options.allowed == null || this.options.allowed.length > 0) {
            this.element = $(elt);
            this.menu = $(mnu);
            this.index = 0;
            var lis = this.menu.getElementsByTagName("LI");
            for (var idx = 0; idx < lis.length; idx++) {
                lis[idx].menuIndex = idx;
                Element.addClassName(lis[idx], "menuitem");
            }
            this.entryCount = lis.length;
            this.onclicklistener = this.onclick.bindAsEventListener(this);
            Event.observe(this.element, "contextmenu", this.onrightclick.bindAsEventListener(this));
            Event.observe(this.menu, "mouseover", this.onhover.bindAsEventListener(this));
        }
	},
    hide: function() {
        ContextMenu._currentMenu = null;
        Element.hide(this.menu);
    },
    onrightclick: function(event) {
        if (ContextMenu._currentMenu != null) {
            ContextMenu._currentMenu.hide();
        }
        this.index = 0;
        ContextMenu._currentMenu = this;
        var lis = this.menu.getElementsByTagName("LI");
        for (var idx = 0; idx < lis.length; idx++) {
            lis[idx].menuIndex = idx;
            if (this.options.allowed != null && !this.options.allowed[idx]) {
                Element.hide(lis[idx]);
            } else {
                Element.show(lis[idx]);
            }
        }
        this.menu.style.left = Event.pointerX(event) + 'px';
        this.menu.style.top = Event.pointerY(event) + 'px';
        Effect.Appear(this.menu, {duration : this.options.duration});
        Event.observe(document, "click", this.onclicklistener);
        Event.stop(event);
    },
    onhover: function(event) {
        var element = Event.findElement(event, 'LI');
        if (this.index != element.menuIndex) {
            this.index = element.menuIndex;
            this.render();
        }
        Event.stop(event);
    },
    onclick: function(event) {
        Event.stopObserving(document, "click", this.onclicklistener);
        this.hide();
    },
    render: function() {
        var lis = this.menu.getElementsByTagName("LI");
        for (var idx = 0; idx < lis.length; idx++) {
            if (this.index == idx) {
                Element.addClassName(lis[idx],"selected");
            } else {
                Element.removeClassName(lis[idx],"selected");
            }
        }
    }
}
