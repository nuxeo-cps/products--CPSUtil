========
CPS JOBS
========

:Revision: $Id: fields.txt 51533 2007-04-16 09:32:03Z gracinet $

.. sectnum::    :depth: 4
.. contents::   :depth: 4

CPS jobs is a harness to launch python scripts ("jobs") against a CPS
portal. The jobs can invoke any API from the Zope/CMF/CPS stack
and run as registered users. It works either in monolithic or ZEO
setups.

For long-running scripts, it is highly preferable to external methods.

INSTANCE TYPES
==============

The best flexibility is achieved with a ZEO cluster setup. In that
context, there's no need to stop the application, and a job can be ran
in any client, currently serving requests or not. There's no need to
make a dedicated client.

In monolithic setups, you have to stop the instance before running a
CPS job. This is because the running instance has a lock on the ZODB.

INVOCATION
==========

From the instance home::

 $ bin/zopectl run /path/to/the/script.py [options] <portal id> [job args]

where <portal id> is the id of the cps portal object (expected to be
found at the root of the application).

Available options
-----------------

To get the list of common options for all jobs, simply do::

  python Products/CPSUtil/cpsjob.py

Currently, this is::

  -h, --help            show this help message and exit
  -u USER_ID, --username=USER_ID specifies the id of the user to run as.
  this user must be either a global Zope one (from the root ``acl_users``)
  or one from the targetted CPS portal. He must have the ``Manager`` role.
  In case there is a user with that id both at the root of Zope and within
  the CPS portal, the former takes precedence.

For a given job, do (a bit longer to execute)::

  bin/zopectl run /path/to/the/script.py --help

The user option
---------------

It is highly suggested to provide it with the id of a valid Zope user with
management rights (ZMI access at the root).

Indeed, some jobs can create scripts, skins layers etc. They would then
be owned by the provided user, and might become a major
problem with Zope's security refusing them later on, leading to a
portal severely broken (yet easily fixable) portal.

STANDARD JOBS
=============

A few jobs ship right away with CPS. Look for ``jobs`` directories
in the various products, and in particular in CPSUtil and CPSDefault.
For instance, to reindex the catalog of a CPS portal, and rebuil its
tree caches, you can do::

 bin/zopectl run Products/CPSDefault/jobs/resync -u <user> -c -t <portal id>

WRITING JOBS
============

A job for ``zopectl run`` typically looks like this (new in CPSUtil
1.11 / CPS 3.5.3)::

 >>> def job(portal, arguments, options):
 ...   # do something
 >>> from Products.CPSUtil import cpsjob
 >>> cpsjob.run(job)

``portal`` is the portal object. ``options`` and ``arguments`` as are
provided by the ``optparse`` module, the latter being stripped from
the portal id.

Apart from that, they follow the same rules as any piece of unrestricted
code. You can do anything that does not expect the REQUEST object to
be a real one (see below), and import any module from Zope or application code.

It is possible to separate the bootstrapping (getting the portal
object, parse command-line) and actual execution::

 >>> from Products.CPSUtil.cpsjob import bootstrap
 >>> portal, options, arguments = bootstrap(app)
 >>> # do something on the portal

This was the preferred way of doing before the introduction of
``cpsjob.run``. It is still supported, but transaction commit

Persisting changes
------------------
If the job is being launched by ``cpsjob.run``, there's nothing
special to be done.

Otherwise, the code has to perform transaction commits explicitely::

  >>> import transaction
  >>> transaction.commit()

Note also that long jobs should at least use transaction
savepoints (to reclaim RAM) or commits.

There is currently no replay facility in case of conflicts.

Job arguments and options
-------------------------
To accept more command line options, add them to ``cpsjob.optparser``
before the call to ``bootstrap`` or ``run``::

 >>> from Products.CPSUtil import cpsjob
 >>> cpsjob.optparser.add_option('-e', '--example', dest='exmp', default='val')
 >>> portal, options, arguments = cpsjob.bootstrap(app)

``optparse`` is a normal ``OptParse`` instance. You can for instance
also change ``usage``, invoke ``optparse.error()``, and ``--help``
will display your updated list of options.

Sample job
----------

This job prints the creation date of the portal, or of a document specified by
its relative path from the portal::

  from Products.CPSUtil import cpsjob
  from zope.interface import implements
  from Products.CPSCore.interfaces import ICPSProxy, ICPSSite

  def print_date(portal, args, options):
      rpath = args and args[0] or ''
      ob = portal.unrestrictedTraverse(rpath)

      if ICPSSite.providedBy(ob):
          print "Found the portal object"
      elif not ICPSProxy.providedBy(ob):
          raise RuntimeError("Object at '%s' is not a CPS Proxy." % rpath)
      else:
          print "\nFound CPS proxy at '%s'" % rpath
      print "Creation date: %s" % ob.created() # Dublin core API

  cpsjob.run(app, print_date)

Wrapping an external method as a job
------------------------------------

People have been using external methods for a long time for cps portal
administrative tasks, the most pervasive example being the tasks
provided by ``cpshousekeeping``, a script that actually mostly calls
external methods through the HTTP library.

It's easy to wrap an external method in a cps job, therefore making it
much more suited for automated tasks.
Here's an example that's equivalent to a call of ``ext_meth`` on the
portal, with no query arguments::

  >>> from Products.CPSUtil import cpsjob
  >>> def job(portal, args, options):
  >>>     portal.ext_meth()
  >>> cpsjob.run(app, job)


Jobs and conflicts
------------------

As of now, there is no helper to handle database conflicts. If a
``ConflictError`` is being raised, the current job transaction will
rollback, and the job will exit.

This may be problematic if the job does periodic transaction commits,
since the rollback will then be partial.

.. Emacs
.. Local Variables:
.. mode: rst
.. End:
.. Vim
.. vim: set filetype=rst:
