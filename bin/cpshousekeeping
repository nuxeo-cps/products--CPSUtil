#!/usr/bin/python
#
# (C) Copyright 2005-2008 Nuxeo SAS <http://nuxeo.com>
# Authors:
# M.-A. Darche <madarche@nuxeo.com>
# Olivier Grisel <og@nuxeo.com>
# Julien Anguenot <ja@nuxeo.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#
# $Id$
"""A script to perform various housekeeping tasks on CPS by calling Zope.

This script should be run directly against the server running Zope through HTTP
and locally, ie not called through Apache httpd and run on localhost.

This script can be used for monolithic Zope instances as well as ZEO
configurations. In this latter case, one has just to run this script against one
of the ZEO clients.

A good practice is to call cpshousekeeping from another script, for example
a zopecpshousekeeping shell script, so that the user name and password for
connecting to Zope are never displayed in the email notifications sent by the
cron daemon.

Depending on your needs, call this script in /etc/cron.daily/,
/etc/cron.weekly/, /etc/cron.monthly/ or as an item in a user crontab through
the "crontab -e" command.

For example start the zopecpshousekeeping script every night at 03h59:

59 3 * * * zopecpshousekeeping

With the zopecpshousekeeping shell script containing the full command:

#!/bin/sh

/usr/local/sbin/cpshousekeeping --verbose --user admin --password 'xxx' --host localhost --port 8080 --instance-id cps --purge-repository --purge-localroles-force --pack-zodb --zodbfile /home/zope/cps/var/Data.fs --backupdir /var/backups/zodb/www.mysite.net

"""

import sys
import os
import gzip
import base64
from urllib import urlencode
import urllib2
import re
from time import strftime, gmtime
from optparse import OptionParser

DEFAULT_HOST_NAME = 'localhost'
DEFAULT_HOST_PORT = 8080
DEFAULT_INSTANCE_ID = 'cps'
DEFAULT_USER_NAME = 'admin'
DEFAULT_USER_PASSWORD = 'admin'
DEFAULT_ARCHIVED_REVISION_COUNT = 0
DEFAULT_HISTORY_DAYS = 0
DEFAULT_ZODB_PATH = '/usr/local/zope/instance/cps/var/Data.fs'
DEFAULT_ZODB_BACKUP_DIR_PATH = '/var/backups/zodb'
DEFAULT_ZODB_BACKUPS_KEEP_COUNT = 7
DEFAULT_NOTIFICATION_FREQ = None

ZODB_PACKING_URL_PATTERN = 'http://%s:%s/Control_Panel/Database/manage_pack'
PURGE_LOCALROLES_URL_PATTERN = 'http://%s:%s/%s/portal_membership/manage_purgeLocalRoles'
PURGE_LOCALROLES_FORCED_URL_PATTERN = 'http://%s:%s/%s/portal_membership/manage_purgeLocalRoles'
PURGE_DELETED_REVISIONS_URL_PATTERN = 'http://%s:%s/%s/portal_repository/manage_purgeDeletedRevisions'
PURGE_ARCHIVED_REVISIONS_URL_PATTERN = 'http://%s:%s/%s/portal_repository/manage_purgeArchivedRevisions'
TIME_FORMAT = '%Y-%m-%d_%H:%M'
# This regexp matches file names of the form
# YYYY-MM-dd_hh:mm-xxxxxxxxxx
# Examples:
# 2007-09-17_11:24-Data.fs
# 2007-09-17_11:24-Data.fs.gz
ZODB_BACKUP_FILENAME_REGEXP = re.compile(r'\d+-\d{2}-\d{2}_\d{2}:\d{2}-.+')
SEND_NOTIFICATIONS_PATTERN = 'http://%s:%s/%s/cps_subscriptions_schedule_notifications?subscription_mode=%s'


def execArgs():
    """Analyze command line arguments.
    """
    usage = """Usage: %prog [options]

Example:
%prog --verbose --user admin --password 'xxx' --host localhost --port 8080 --instance-id cps --purge-repository --purge-localroles-force --pack-zodb --zodbfile /home/zope/cps/var/Data.fs --backupdir /var/backups/zodb/www.mysite.net
    """
    parser = OptionParser(usage=usage)

    parser.add_option('-v', '--verbose',
                      action='store_true',
                      dest='verbose',
                      default=False,
                      help="Print additional information to stdout.")

    parser.add_option('-n', '--host',
                      action='store',
                      dest='host_name',
                      type='string',
                      metavar='NAME',
                      default=DEFAULT_HOST_NAME,
                      help="Use NAME for the server to connect to. "
                      "Defaults to '%s'." % DEFAULT_HOST_NAME)

    parser.add_option('-p', '--port',
                      action='store',
                      dest='host_port',
                      type='int',
                      metavar='NUMBER',
                      default=DEFAULT_HOST_PORT,
                      help="Use NUMBER for the server port to use. "
                      "Defaults to %s." % DEFAULT_HOST_PORT)

    parser.add_option('-i', '--instance-id',
                      action='store',
                      dest='instance_id',
                      type='string',
                      metavar='ID',
                      default=DEFAULT_INSTANCE_ID,
                      help="Use ID for CPS instance id to use. "
                      "Defaults to '%s'." % DEFAULT_INSTANCE_ID)

    parser.add_option('-u', '--user',
                      action='store',
                      dest='user_name',
                      type='string',
                      metavar='NAME',
                      default=DEFAULT_USER_NAME,
                      help="Use NAME for the user name to Zope. "
                      "Defaults to '%s'." % DEFAULT_USER_NAME)

    parser.add_option('-w', '--password',
                      action='store',
                      dest='user_password',
                      type='string',
                      metavar='PASSWORD',
                      default=DEFAULT_USER_PASSWORD,
                      help="Use PASSWORD for the password to Zope. "
                      "Defaults to '%s'." % DEFAULT_USER_PASSWORD)

    parser.add_option('-r', '--purge-repository',
                      action='store_true',
                      dest='purge_repository',
                      default=False,
                      help="Purge the repository to remove orphan documents.")

    parser.add_option('-l', '--purge-localroles',
                      action='store_true',
                      dest='purge_localroles',
                      default=False,
                      help="Purge the localroles of deleted members "
                      "recorded as such.")

    parser.add_option('-L', '--purge-localroles-force',
                      action='store_true',
                      dest='purge_localroles_force',
                      default=False,
                      help="Purge the localroles of deleted members.")

    parser.add_option('--purge-archived-revisions',
                      action='store_true',
                      dest='purge_archived_revisions',
                      default=False,
                      help="Purge the archived revisions of documents.")

    parser.add_option('--archived-revisions',
                      action='store',
                      dest='archived_revisions',
                      type='int',
                      metavar='NUMBER',
                      default=DEFAULT_ARCHIVED_REVISION_COUNT,
                      help="Use NUMBER for the number of archives "
                      "to keep for each document. "
                      "Defaults to %s." % DEFAULT_HISTORY_DAYS)

    parser.add_option('-P', '--pack-zodb',
                      action='store_true',
                      dest='pack_zodb',
                      default=False,
                      help="Pack the ZODB.")

    parser.add_option('-d', '--days',
                      action='store',
                      dest='days',
                      type='float',
                      metavar='NUMBER',
                      default=DEFAULT_HISTORY_DAYS,
                      help="Use NUMBER for the days to keep in history. "
                      "Defaults to %s." % DEFAULT_HISTORY_DAYS)

    parser.add_option('-z', '--zodbfile',
                      action='store',
                      dest='zodbfile_path',
                      type='string',
                      metavar='FILE',
                      default=DEFAULT_ZODB_PATH,
                      help="The FILE path to the ZODB. "
                      "The default is %s." % DEFAULT_ZODB_PATH)

    parser.add_option('-b', '--backup',
                      action='store_true',
                      dest='backup',
                      default=False,
                      help="Backup the ZODB that has just been packed "
                           """using the "cp" command.""")

    parser.add_option('-k', '--backupdir',
                      action='store',
                      dest='backupdir_path',
                      type='string',
                      metavar='FILE',
                      default=DEFAULT_ZODB_BACKUP_DIR_PATH,
                      help="The FILE path of the directory used for storing "
                      "ZODB backups. "
                      "The default is %s." % DEFAULT_ZODB_BACKUP_DIR_PATH)

    parser.add_option('--nocompress',
                      action='store_true',
                      dest='nocompress',
                      default=False,
                      help="Don't compress the ZODB backups.")

    parser.add_option('-B', '--keep-backups-count',
                      action='store',
                      dest='backups_keep_count',
                      type='int',
                      metavar='NUMBER',
                      default=DEFAULT_ZODB_BACKUPS_KEEP_COUNT,
                      help="The NUMBER of ZODB backups to keep. "
                      "The default is %s." % DEFAULT_ZODB_BACKUPS_KEEP_COUNT)

    parser.add_option('-s', '--send-notifications',
                      action='store',
                      dest='notifications',
                      type='choice',
                      metavar='FREQ',
                      choices=['daily','weekly', 'monthly'],
                      default=DEFAULT_NOTIFICATION_FREQ,
                      help="Send email notifications of frequence FREQ of "
                      "[daily|weekly|monthly]. Defaults to %s." %
                      str(DEFAULT_NOTIFICATION_FREQ))

    (options, args) = parser.parse_args()
    global verbose
    verbose = options.verbose

    if options.purge_repository:
        log("\nPurging the document repository of host %s ..." %
            options.host_name)
        url = PURGE_DELETED_REVISIONS_URL_PATTERN % (options.host_name,
                                                     options.host_port,
                                                     options.instance_id)
        postUrl(url, options.user_name, options.user_password)
        log("Successfully purged repository of host %s" % options.host_name)

    if options.purge_localroles:
        log("\nPurging the local roles of host %s ..." % options.host_name)
        url = PURGE_LOCALROLES_URL_PATTERN % (options.host_name,
                                              options.host_port,
                                              options.instance_id)
        postUrl(url, options.user_name, options.user_password)
        log("Successfully purged localroles of host %s" % options.host_name)

    if options.purge_localroles_force:
        log("\nPurging the local roles (forced) of host %s ..."
            % options.host_name)
        url = PURGE_LOCALROLES_FORCED_URL_PATTERN % (options.host_name,
                                                     options.host_port,
                                                     options.instance_id)
        postUrl(url, options.user_name, options.user_password,
                params={'lazy:boolean': False})
        log("Successfully purged localroles (forced) of host %s"
            % options.host_name)

    if options.purge_archived_revisions:
        log("\nPurging archived revisions of documents of host %s "
            "(keeping no more than %s archives per doc) ..."
            % (options.host_name, options.archived_revisions))
        url = PURGE_ARCHIVED_REVISIONS_URL_PATTERN % (options.host_name,
                                                      options.host_port,
                                                      options.instance_id)
        postUrl(url, options.user_name, options.user_password,
                params={'keep_max': options.archived_revisions})
        log("Successfully purged archived revisions of documents of host %s"
            % options.host_name)

    if options.notifications:
        log("\nSending notifications of host %s ..." % options.host_name)
        url = SEND_NOTIFICATIONS_PATTERN % (options.host_name,
                                            options.host_port,
                                            options.instance_id,
                                            options.notifications)
        callUrl(url, options.user_name, options.user_password)
        log("Successfully sent notifications of host %s" % options.host_name)

    if options.pack_zodb:
        packZodb(options.zodbfile_path, options.days,
                 options.host_name, options.host_port,
                 options.user_name, options.user_password)

    if options.backup:
        backupZodb(options.zodbfile_path, options.backupdir_path,
                   not options.nocompress, options.backups_keep_count)


def packZodb(zodb_path, days, host_name, host_port, user_name, user_password):
    """TODO : packZodb should WARN and not perform this action if there isn't
    enough space left on the device where the ZODB is.
    The method should check if there is 2x the size of the ZODB left.
    """
    log("\nPacking ZODB %s of host %s ..." % (zodb_path, host_name))
    if verbose:
        zodb_size = os.path.getsize(zodb_path)
        log("ZODB size is %s" % getHumanReadableSize(zodb_size),
	    increment=1)
    url = ZODB_PACKING_URL_PATTERN % (host_name, host_port)
    postUrl(url, user_name, user_password, params={'days:float': days})
    if verbose:
        zodb_size = os.path.getsize(zodb_path)
        log("ZODB size now is %s" % getHumanReadableSize(zodb_size),
	    increment=1)
    log("Successfully packed ZODB of host %s" % host_name)

def backupZodb(zodb_path, backupdir_path, compress=True, backups_keep_count=0):
    """TODO : backupZodb should WARN and not perform this action if there isn't
    enough space left on target device. But unfortunately this requires parsing
    of platform specific information and there isn't any native python-way to
    do this yet.
    """
    log("\nChecking for backups ...")
    time_string = strftime(TIME_FORMAT, gmtime())
    file_name = '%s-%s' % (time_string, os.path.basename(zodb_path))
    zodb_backup_path = os.path.join(backupdir_path, file_name)
    command = "cp -p %s %s" % (zodb_path, zodb_backup_path)
    log("command = %s" % command, increment=1)
    os.system(command)
    if compress:
        compressFile(zodb_backup_path)

    if backups_keep_count > 0:
        log("Checking for potential backups to remove, "
            "keeping only the %s ones ..." % backups_keep_count, increment=1)
        file_names = os.listdir(backupdir_path)
        file_names = [x for x in file_names
                      if ZODB_BACKUP_FILENAME_REGEXP.match(x)]
        file_names.sort()
        file_names_to_delete = file_names[:-backups_keep_count]
        for file_name in file_names_to_delete:
            file_path = os.path.join(backupdir_path, file_name)
            log("Removing = %s ..." % file_path, increment=1)
            os.remove(file_path)
    log("Successful backup of the ZODB")


def compressFile(file_path):
    """Compress a file using GZIP.
    """
    log("Compressing %s ..." % file_path)
    f_in = open(file_path, 'rb')
    gzip_file_path = file_path + '.gz'
    f_out = gzip.open(gzip_file_path, 'wb')
    f_out.writelines(f_in)
    f_out.close()
    os.remove(file_path)
    log("Compressing done : %s" % gzip_file_path)


def postUrl(url, username, password, params={}):
    """Call urllib2.urlopen with forced HTTP Basic Auth header.
    """
    request = urllib2.Request(url)
    base64string = base64.encodestring('%s:%s' % (username, password))[:-1]
    request.add_header('Authorization', 'Basic %s' % base64string)
    if params:
        params_encoded = urlencode(params)
        request.add_data(params_encoded)
    else:
        # Adding this to make sure the request is a POST request,
        # because this method need to be POST because it modifies
        # the state of the application.
        request.add_data("This is a POST method")
    try:
        urllib2.urlopen(request)
    except urllib2.HTTPError, e:
        if e.code == 401:
            log('Invalid credentials on %s, aborting' % url, True)

        elif e.code == 400:
            # XXX: manage_purgeLocalRoles returns code 400
            return
        else:
            log('Error %d on %s, aborting' % (e.code, url), True)
        sys.exit(1)
    except IOError:
        log('Unable to open %s, aborting' % url, True)
        sys.exit(1)


def getHumanReadableSize(octet_size):
    """Returns a string that is a human readable file size.
    """
    mega = 1024*1024
    kilo = 1024

    if octet_size is None or octet_size <= 0:
        return "0"
    elif octet_size >= mega:
        if octet_size == mega:
            return "1M"
        else:
            msize = float(octet_size/float(mega))
            msize = float('%.02f' % msize)
            return "%sM" % msize
    elif octet_size >= kilo:

        if octet_size == kilo:
            return "1K"
        else:
            ksize = float(octet_size/float(kilo))
            ksize = float('%.02f' % ksize)
            return "%sK" % ksize
    else:
        return str(octet_size)


def getSpaceLeftOnDevice():
    """TODO
    $ df -h | grep '^/dev/' | awk '{print $4}'
    """
    pass


def log(message, force=False, increment=0):
    """Log the given message to stderr.
    """
    message =  '    ' * increment + message
    if force or verbose:
        print >> sys.stderr, message


# Shell conversion
if __name__ == '__main__':
    execArgs()

