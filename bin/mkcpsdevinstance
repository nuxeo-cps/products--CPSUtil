#!/opt/python-2.4/bin/python
# Copyright (c) 2010 Georges Racinet <http://www.racinet.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#
# $Id$
"""Direct executable to make a cps developpment instance.

This script relies on the knowledge of the Zope home,
that's why it can't directly be distributed with CPS itself
"""
import os

ZOPE_VERSIONS = ('2.10', '2.9') # first has precedence
ZOPE_HOME_PATTERN = '/opt/Zope-%s'
HGBUNDLER_PATH = os.environ['PATH'].split(':')
HGBUNDLER_PATH.append('/opt/hgbundler/bin')
ZOPE_CPS_SKEL = '/etc/opt/cps-3.5/zope-dev-skel'
SITE_CREATE_JOB = 'Products/CPSDefault/jobs/makecpssite.py'

from optparse import OptionParser
parser = OptionParser(usage="%prog [options] <target directory>")
default_bundle = 'https://hg.cps-cms.org/CPS/bundles?subpath=CPS-3-full'
default_themes = 'Products/CPSDefault/themes'
parser.add_option('-b', '--bundle-url', dest="bundle_url",
                  default=default_bundle,
                  help=("Remote bundle repo url. Use subpath argument to "
                  "specify that the bundle is a subdirectory. "
                  "Defaults to %r") % default_bundle)
parser.add_option('-t', '--root-themes-container',
                  dest='themes', default=default_themes,
                  help=("Path from the instance home to the root "
                  "themes container. Defaults to %r" % default_themes))
parser.add_option('-u', '--zope-user_and_pwd', dest="user_and_pwd",
                 default='admin:admin',
                 help="Zope toplevel initial user and password (<name>:<pwd>)")
parser.add_option('--posix-owner', dest="posix_owner", default='',
                 help="Set ownership of the instance on filesystem "
                      "(needed to run as root, typically set to zope:zope)")
parser.add_option('--zope-version', default='',
                  help="Specify Zope version to be used "
                       "(2.9 for CPS 3.5 < 3.5.3, "
                       "2.9 or 2.10 for CPS >= 3.5.3). Useful only if both "
                       "are on the system, check contents of /opt")

options, args = parser.parse_args()
if len(args) != 1:
    parser.error("Wrong number or arguments")

zversion = options.zope_version
if not zversion:
   for zversion in ZOPE_VERSIONS:
        zhome = ZOPE_HOME_PATTERN % zversion
        if os.path.isdir(zhome):
           break
   zversion = ZOPE_VERSIONS[0]
elif not zversion in ZOPE_VERSIONS:
   parser.error("Zope version must be one of " + ', '.join(ZOPE_VERSIONS))
else:
   zhome = ZOPE_HOME_PATTERN % zversion

instance_home = args[0]

os.system('%s/bin/mkzopeinstance.py -d %s -u %s -s %s' % (
    zhome, instance_home, options.user_and_pwd, ZOPE_CPS_SKEL))
if options.posix_owner:
    os.system('chown -R %s %s' % (options.posix_owner, instance_home))
user_id, _ = options.user_and_pwd.split(':')

url = options.bundle_url
split = url.split('?subpath=', 1)
products_dir = instance_home + '/Products'

for p in HGBUNDLER_PATH:
    hgbundler = os.path.join(p, 'hgbundler')
    if os.access(hgbundler, os.X_OK and os.R_OK):
        break
else:
    raise RuntimeError("Could not find hgbundler on the path nor in /opt")


if len(split) == 2:
    subpath = split[1]
    url = split[0]
    os.system('hg clone %s %s/bundle' % (url, instance_home))
    os.system('ln -s bundle/%s %s' % (subpath, products_dir))
else:
    subpath = ''
    os.system('hg clone %s %s/Products' % (url, instance_home))

os.system('%s --bundle-dir=%s make-clones' % (hgbundler, products_dir))

cmd = '%s/bin/zopectl run %s/%s -u %s cps ' % (
    instance_home, instance_home, SITE_CREATE_JOB, user_id)
if options.themes:
    cmd += '-t %s' % options.themes
os.system(cmd)

print "Instance at %s ready to be started" % instance_home
